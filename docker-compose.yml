version: "3.7"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on:
      - zookeeper

    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 3
      start_period: 30s

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    ports:
      - 8081:8081
    depends_on: [zookeeper, kafka]
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/subjects"]
      interval: 10s
      retries: 3
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - my-network

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - my-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=16G
      - SPARK_WORKER_CORES=8
      - SPARK_WORKER_PORT=8081
      - SPARK_DRIVER_EXTRA_JAVA_OPTIONS=-Dspark.rpc.message.maxSize=256
      - SPARK_EXECUTOR_EXTRA_JAVA_OPTIONS=-Dspark.rpc.message.maxSize=256
    depends_on:
      - spark-master
    ports:
      - "8082:8081"  # Change to a different port
    networks:
      - my-network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: air_quality
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - my-network


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - postgres
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      retries: 3
      start_period: 30s

  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow-webserver
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=8kHA2EfmUeiZKfNFYPtCosxU_8RL5bSonZzQPvEIbYY=
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:pass123@postgres/airflow
      - AIRFLOW__WEBSERVER__RBAC=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      # - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - PGPASSWORD=pass123   # Ajout du mot de passe ici
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8084:8080"
    networks:
      - my-network
    user: "50000:50000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    entrypoint: >
      bash -c "
      pip install --upgrade pip &&
      pip install --no-cache-dir -r /opt/airflow/requirements.txt &&
      psql -h postgres -U admin -d postgres -c \"SELECT 1 FROM pg_database WHERE datname = 'airflow'\" | grep -q 1 || psql -h postgres -U admin -d postgres -c \"CREATE DATABASE airflow\" &&
      airflow db init &&
      airflow users create --username admin --password pass123 --firstname Admin --lastname User --role Admin --email admin@example.com &&
      airflow webserver
      "

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=8kHA2EfmUeiZKfNFYPtCosxU_8RL5bSonZzQPvEIbYY=
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:pass123@postgres/airflow
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./scripts:/opt/airflow/scripts
    networks:
      - my-network
    user: "50000:50000"
    entrypoint: >
      bash -c "
      pip install --upgrade pip &&
      pip install --no-cache-dir -r /opt/airflow/requirements.txt &&
      airflow scheduler
      "

volumes:
  mongo-data:
  pgdata:
  grafana_data:

networks:
  my-network:
    driver: bridge